name: Python Test Code

on:
  push:
    branches: development
  pull_request:
    branches: development
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        default: development

permissions:
  contents: read

env: 
  PYTHON_VERSION: 3.11.3

jobs:
  static-code-analysis:
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.ref_name }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint

    # [ES] Pylint ofrece dos opciones para detener el workflow si se encuentran errores:
    #      Parar si el score se encuentra bajo determinado valor
    #      Utilizare este metodo por conveniencia ya que el codigo presenta errores
    # [EN] Pylint offers two methods to stop the code if errors are found:
    #      Stop if the score if less than a specific threshold
    #      This method will be used because the code presents errors. 
    - name: Static Code Analysis (Pylint)
      env: 
        MIN_SCORE: 4.5
      run: |
        pylint . --exit-zero --output-format json2 --output pylint-report.json 

        score=$(cat pylint-report.json | jq '.statistics.score ')

        if [[ $score < $MIN_SCORE ]]; then
          echo "The score is below $MIN_SCORE. Please fix linting issues before merging. "
          exit 1
        else 
          echo "The score meets the threshold"
        fi

    # [ES] O parar si se encuentra cualquier error
    # [EN] Or stop if any error is found
    # - name: Static Code Analysis (Pylint)
    #   run: |
    #     pylint . --output-format json2 --output pylint-report.json   

    - name: Upload static code analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pylint-report
        path: pylint-report.json

  code-coverage-analysis:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    # [ES] El test fallara si el coverage se encuentra bajo un valor determinado - para esta demo se usara 80
    # [EN] The test will fail if the coverage percentage is bellow the threshold - 80% is used for this demo
    - name: Run Unit Tests and Collect Coverage
      env: 
        MIN_SCORE: 80
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      run: |

        coverage run manage.py test

        coverage json 
        # [ES] Se eligio JSON para esta demostraciÃ³n pero coverage ofrece otros formatos para imprimir el reporte.
        # [EN] JSON format was chosen for this demo. Other output formats can be considered.

        coverage report --fail-under=$MIN_SCORE

    - name: Upload code coverage analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage.json

  vulnerability-scan:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@0.30.0
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL'
        exit-code: 0 
        # [ES] Algunas librerias tienen CVEs criticos por lo que el workflow falla. 
        # [EN] Some libraries show CRITICAL vulnerabilities so the workflow will fail.

    - name: Upload vulnerability analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-report
        path: trivy-results.txt